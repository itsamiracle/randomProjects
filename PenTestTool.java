
import java.io.BufferedReader;
import java.io.FileReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// blü
public class PenTestTool {

  ArrayList<Integer> statusCodes =  new ArrayList<>(Arrays.asList(200,201,202,203,204,205,206));
  ArrayList<String> resultList =  new ArrayList<>();
  String targetUrl;
  String fileName;
  BufferedReader br;
  int wordCounter = 0;

  private static char[] charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/".toCharArray();
  private static String[] extensions = {".zip", ".tar.gz", ".do", ".txt", ".rar", ".pdf", ".tar", ".sql"};

  public static void main(String[] args) throws Exception {

    //TODO: Exception handling could be done better
    PenTestTool tool = new PenTestTool();

    Runtime.getRuntime().addShutdownHook(new Thread() {
      public void run() {
        System.out.println("\nDone.\n" + tool.wordCounter + " words searched in total. "
                            + tool.resultList.size() + " results found.");
      }
    });

    if (args.length == 0) {
      System.out.println("Missing Parameters");
      return;
    }
    // if only a URL is entered then do a brute-force attack
    if (args.length == 1) {
      System.out.println("Starting a brute-force attack\nSearching...");
      tool.targetUrl = args[0];
      // if the given URL does not start with 'http://' or 'https://'
      if (!tool.targetUrl.startsWith("http")) {
        tool.targetUrl = "http://" + tool.targetUrl;
      }
      if (tool.targetUrl.endsWith("/")) {
        tool.targetUrl = tool.targetUrl.substring(0,tool.targetUrl.length() -1 );
      }
      for (int length = 1;  length < 20; length++) {
        tool.bruteForceAttack("", 0, length);
      }
    }
    // else use second parameter as word list
    else if (args.length == 2) {
      System.out.println("Starting a word list attack\nGoing through the world list... ");
      tool.targetUrl = args[0];
      // if the given URL does not start with 'http://' or 'https://'
      if (!tool.targetUrl.startsWith("http")) {
        tool.targetUrl = "http://" + tool.targetUrl;
      }
      if (tool.targetUrl.endsWith("/")) {
        tool.targetUrl = tool.targetUrl.substring(0,tool.targetUrl.length() - 1);
      }
      tool.fileName = args[1];
      tool.wordListAttack();
    } else {
      System.out.println("Too many arguments!");
    }
  }

  public void bruteForceAttack(String str, int pos, int length) throws Exception {
    if (length == 0) {
      str = "/" + str;
      for (String extension : extensions) {
        int responseCode = sendGetRequest(targetUrl + str + extension);
        if (statusCodes.contains(responseCode)) {
          System.out.println(targetUrl + str + extension + "\tResponse code: " + responseCode);
          resultList.add(targetUrl + str + extension + "\tResponse code: " + responseCode);
        }
      }
    } else {
      for (int i = 0; i < charset.length; i++) {
        bruteForceAttack(str + charset[i], i, length - 1);
      }
    }
  }

  public void wordListAttack() throws Exception {
    //TODO: BufferedReader'ı buraya yazınca neden çalışmadıgını bul
    try {
      br = new BufferedReader(new FileReader(fileName));
      String line = br.readLine();

      while (line != null) {
        ArrayList<String> trimmedWords = new ArrayList<>();
        // If you have consecutive spaces, using \\s will replace each whitespace character with the provided string.
        // Given \\s+ it will replace each set of whitespaces with a single replacement string.
        String[] wordsArray = line.replaceAll("\\s+", " ").split(" ");
        for (String s : wordsArray) {
          if (!s.equals("")) {
            trimmedWords.add(s);
          }
        }
        for (String word : trimmedWords) {
          if (!word.startsWith("/")) {
            word = "/" + word;
          }
          int responseCode = sendGetRequest(targetUrl + word);
          if (statusCodes.contains(responseCode)) {
            System.out.println(targetUrl + word + "\tResponse code: " + responseCode);
            resultList.add(targetUrl + word + "\tResponse code: " + responseCode);
          }
        }
        line = br.readLine();
      }
      //System.out.println("\nDone. " + wordCounter + " words searched in total. ");
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      br.close();
    }
  }

  private int sendGetRequest(String url) throws Exception {
    // javadoc of HttpURLConnection: Each HttpURLConnection instance is used to make a single request
    wordCounter++;
    URL myUrl = new URL(url);
    HttpURLConnection con = (HttpURLConnection) myUrl.openConnection();
    // optional, default is GET
    con.setRequestMethod("GET");
    int responseCode = con.getResponseCode();
    con.disconnect();
    return responseCode;
  }
}
